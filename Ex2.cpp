//Имея входную строку (s) и шаблон (p), реализуйте сопоставление шаблонов с
//подстановочными знаками с поддержкой '?' и '*' где: '?' соответствует любому одиночному
//символу, '*' соответствует любой последовательности символов (включая пустую
//последовательность). Сопоставление должно охватывать всю входную строку (не
//частичную).

#include <iostream>
#include <vector>
#include <string>

using namespace std;

bool isMatch(string s, string p) {
    int m = s.size(); // инициализируем переменную m длиной строки s
    int n = p.size(); // инициализируем переменную n длиной строки p

    // создаем двумерный массив для хранения результатов сопоставления
    vector<vector<bool>> dp(m + 1, vector<bool>(n + 1, false));

    // пустая строка и пустой шаблон сопоставляются
    dp[0][0] = true;

    // обрабатываем случай, когда шаблон начинается с '*'
    for (int j = 1; j <= n; ++j) {
        if (p[j - 1] == '*') { // если текущий символ шаблона - '*'
            dp[0][j] = dp[0][j - 1]; // устанавливаем значение в соответствии с предыдущим символом шаблона
        }
    }

    // заполняем таблицу сопоставления
    for (int i = 1; i <= m; ++i) {
        for (int j = 1; j <= n; ++j) {
            if (p[j - 1] == '?' || s[i - 1] == p[j - 1]) { // если текущий символ шаблона - '?' или совпадает с текущим символом строки
                dp[i][j] = dp[i - 1][j - 1]; // устанавливаем значение в соответствии с предыдущими символами
            } else if (p[j - 1] == '*') { // если текущий символ шаблона - '*'
                dp[i][j] = dp[i - 1][j] || dp[i][j - 1]; // устанавливаем значение в соответствии с предыдущими символами и их комбинациями
            }
        }
    }

    // возвращаем результат сопоставления для всей строки
    return dp[m][n];
}

int main() {
    string s1 = "aa", p1 = "a";
    string s2 = "aa", p2 = "*";
    string s3 = "cb", p3 = "?a";

    cout << "Пример 1: " << (isMatch(s1, p1) ? "true" : "false") << endl;
    cout << "Пример 2: " << (isMatch(s2, p2) ? "true" : "false") << endl;
    cout << "Пример 3: " << (isMatch(s3, p3) ? "true" : "false") << endl;

    return 0;
}
